@startuml

!include shared.puml

title Stacks

class Deployment {
    String name
    String description nullable
}

note as NDeployment
    The result of performing the instructions in a stack,
    taking in any necessary input parameters.
end note
Deployment .up. NDeployment

class DeploymentMaterialization {
    .. notes ..
    in next model
}
Deployment ..> DeploymentMaterialization


package Stacks <<Rect>> {

Deployment "0..*" o--> "1..*" Stack : deploys

class Stack {
    String name
    String description nullable
    --
    \# has_many :children, through: :child_stacks
    Stack children()
}

note as NStack
    The instructions needed to assemble a set
    of resources for a  specific purpose
    (e.g. a database stack).
end note
Stack .up. NStack

abstract class Resource {
}

note as NResource
    A Foreman object to be used or created
    to form an Deployment instance.
end note
Resource .up. NResource

Stack "1" *--> "1..*" Resource : is composed of

interface Ordered <<(M,orchid)>>

Ordered "0..*" --> "0..*" Ordered : depends on

note on link
    Acyclic graph f dependencies.
    Defines order between Resources.
    Used by orchestration to deploy.
end note

RESOURCES

HostgroupResource "0..*" <-- "0..1" HostgroupResource : be parent of
note on link
Foreign keys cannot be stored on target HostgroupResource.
It would prevent Stack share-ability.
end note

HostResource "0..*" --> "1" HostgroupResource : provisions in
ChildStackResource "0..*" o-up--> "1" Stack : child
note on link: Acyclic graph of Stacks.

RESOURCESASSOCIATIONS

class ContainerResource {
    .. notes ..
    in future
}
class ExternalCommandResource {
    .. notes ..
    in future
}

hide ContainerResource
hide ExternalCommandResource

}

@enduml
