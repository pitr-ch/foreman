@startuml
title Example of a simple stack describing web application.

!define OBJECT(name,klass) object name <<klass>>

OBJECT(web_app, Stack)
OBJECT(master_hostgroup, HostgroupResource) {
  name = "master_hostgroup"
}
OBJECT(master_password, ParamResource) {
  name = "master_password"
  default_value = "changeme"
}

OBJECT(db, Stack)
OBJECT(load_balancer, Stack) {
  \# resources omitted
}
OBJECT(web_server, Stack)
OBJECT(db_child, ChildStackResource)
OBJECT(load_balancer_child, ChildStackResource)
OBJECT(web_server_child, ChildStackResource)

web_app --> db_child : is composed_of
db_child --> db : child
web_app --> load_balancer_child : is composed_of
load_balancer_child --> load_balancer : child
web_app --> web_server_child : is composed_of
web_server_child --> web_server : child

web_server_child --> load_balancer_child : depends on
web_server_child --> db_child : depends on

web_app --> master_password : is composed_of
web_app --> master_hostgroup : is composed_of
master_password --> master_hostgroup : will be added to


OBJECT(db_hostgroup, HostgroupResource)
OBJECT(db_server, HostResource) {
  min = 1
  max = 1
}

OBJECT(postgres, PuppetClassResource) {
  name = postgres
}

OBJECT(password_override, ParamOverrideResource) {
  key = "$postgres::password"
  \# only pseudo
  value =
  "<%= get_param('db', "+
  "'db_hostgroup', 'db_password') %>"
}

OBJECT(db_api_url, ParamResource) {
  name = "db_api_url"
  \# pseudo code
  \# computes the url for other stacks to use
  default_value = "<%= compute_url() %>"
}

OBJECT(db_puppetrun, PuppetRunResource)
OBJECT(db_password, ParamResource) {
  name = "db_password"
}


db --> db_hostgroup : is composed_of
db --> db_server : is composed_of
db --> postgres : is composed_of
db --> db_password : is composed_of
db --> password_override : is composed_of
db --> db_api_url : is composed_of
db --> db_puppetrun : is composed_of

postgres --> db_hostgroup : will be added to
db_api_url --> db_hostgroup : will be added to
db_password --> db_hostgroup : will be added to
db_server --> db_hostgroup : provisions in
password_override --> postgres : overrides in
db_puppetrun --> db_server : on

password_override .up.> db_password : uses


OBJECT(web_server_hostgroup, HostgroupResource)
OBJECT(sinatra, PuppetClassResource)
OBJECT(sinatra_instances, HostResource) {
  min = 1
  max = nil # unlimited
}
OBJECT(web_server_puppetrun, PuppetRunResource)

OBJECT(db_url_override, ParamOverrideResource) {
  key = "$sinatra::db::url"
  \# only pseudo
  value =
  "<%= get_param('web_server', "+
  "'web_server_hostgroup', 'db_api_url') %>"
}

OBJECT(db_api_url2, ParamResource) {
  name = "db_api_url"
}

OBJECT(db_password_override, ParamOverrideResource) {
  key = "$sinatra::db::password"
  \# only pseudo
  value =
  "<%= get_param('web_server', "+
  "'web_server_hostgroup', 'db_password') %>"
}

OBJECT(db_password2, ParamResource) {
  name = "db_password"
}


web_server --> web_server_hostgroup : is composed of
web_server --> sinatra : is composed of
web_server --> sinatra_instances : is composed of
web_server --> web_server_puppetrun : is composed of
web_server --> db_url_override: is composed of
web_server --> db_api_url2: is composed of
web_server --> db_password2: is composed of
web_server --> db_password_override: is composed of

sinatra --> web_server_hostgroup : will be added to
sinatra_instances --> web_server_hostgroup : provisions in
web_server_puppetrun --> sinatra_instances : on
db_api_url2 --> web_server_hostgroup : will be added to
db_password2 --> web_server_hostgroup : will be added to
db_url_override --> sinatra : overrides in
db_password_override --> sinatra : overrides in

db_url_override .up.> db_api_url2 : uses
db_password_override .up.> db_password2 : uses

!define CONNECTIONCOLOR DarkBlue

!definelong CONNECT(from,to,instack)
OBJECT(from##2##to, ConnectParamResource)
instack --> from##2##to : is composed of
from##2##to <-[#CONNECTIONCOLOR]-- from : source
from##2##to -[#CONNECTIONCOLOR]--> to : destination
!enddefinelong

CONNECT(master_password,db_password,web_app)
CONNECT(master_password,db_password2,web_app)
CONNECT(db_api_url,db_api_url2,web_app)

master_hostgroup -[#CONNECTIONCOLOR]-> db_hostgroup : be parent of
master_hostgroup -[#CONNECTIONCOLOR]-> web_server_hostgroup : be parent of


OBJECT(my_web_app, Deployment) {
  name = "my_web_app"
}

my_web_app -up--------> web_app : deploys


!define DEPLOYCOLOR DarkGreen
!define FOREMANCOLOR DarkOrange

!define DEPLOYOBJECT(type) skinparam objectBorderColor<<type>> DEPLOYCOLOR
!define FOREMANOBJECT(type) skinparam objectBorderColor<<type>> FOREMANCOLOR

DEPLOYOBJECT(HostDeployment)
DEPLOYOBJECT(HostgroupDeployment)
FOREMANOBJECT(Host)
FOREMANOBJECT(Hostgroup)
DEPLOYOBJECT(Deployment)

!definelong DEPLOY(name,type)
OBJECT(name##_deployment, type##Deployment)
OBJECT("name" as name##_realized, type)
name##_deployment -[#DEPLOYCOLOR]-> my_web_app
name##_deployment -[#DEPLOYCOLOR]-> name##_realized
name##_deployment -up[#DEPLOYCOLOR]-> name
!enddefinelong

!definelong DEPLOY(name,type,alias)
OBJECT(alias##_deployment, type##Deployment)
OBJECT("alias" as alias##_realized, type)
alias##_deployment -[#DEPLOYCOLOR]-> my_web_app
alias##_deployment -[#DEPLOYCOLOR]-> alias##_realized
alias##_deployment -up[#DEPLOYCOLOR]-> name
!enddefinelong

DEPLOY(web_server_hostgroup, Hostgroup)
DEPLOY(db_hostgroup, Hostgroup)
DEPLOY(sinatra_instances, Host, sinatra_instance1)
DEPLOY(sinatra_instances, Host, sinatra_instance2)
DEPLOY(db_server, Host)

legend right
red - stack part of the data model
green - deployment part of the data model
yellow - Foreman models
blue - connecting in/output parameters and parent hostgroups
  of the stacks
end legend

@enduml
